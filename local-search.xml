<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/05/22/GO%E8%AF%AD%E8%A8%80HelloWorld%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    <url>/2024/05/22/GO%E8%AF%AD%E8%A8%80HelloWorld%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="GO语言HelloWorld逆向分析"><a href="#GO语言HelloWorld逆向分析" class="headerlink" title="GO语言HelloWorld逆向分析"></a><strong>GO语言HelloWorld逆向分析</strong></h1><p>使用GOLANG编写hello world程序</p><p><img src="D:\MyBlog\public\img\blogimg\1\1.PNG" alt="1"></p><p>编译出来的程序DIE无法识别，可能是由于使用的GO语言版本较新</p><p><img src="D:\MyBlog\public\img\blogimg\1\2.PNG" alt="2"></p><p>载入IDA分析，实际执行的第一个函数是rt0_amd64_windows，但这并不是程序员编写的第一个逻辑代码的位置</p><p><img src="D:\MyBlog\public\img\blogimg\1\3.PNG" alt="3"></p><p>地址为0X463AA0</p><p><img src="D:\MyBlog\public\img\blogimg\1\4.PNG" alt="4"></p><p>也就是所在的OEP</p><p><img src="D:\MyBlog\public\img\blogimg\1\5.PNG" alt="5"></p><p>跟进该OEP看看是如何走到程序员代码逻辑的</p><p>跟进OEP来到runtime_rt0_go_abi0</p><p><img src="D:\MyBlog\public\img\blogimg\1\6.PNG" alt="6"></p><p>该函数内部有个runtime_mainPC</p><p><img src="D:\MyBlog\public\img\blogimg\1\7.png" alt="7"></p><p>runtime_mainPC指向runtime_main</p><p><img src="D:\MyBlog\public\img\blogimg\1\8.png" alt="8"></p><p>在runtime_main中有个main_main函数</p><p><img src="D:\MyBlog\public\img\blogimg\1\9.png" alt="9"></p><p>然后这个main_main中就是程序员实际所编写的代码了</p><p><img src="D:\MyBlog\public\img\blogimg\1\10.png" alt="10"></p><p>不过此处489572会报错反编译不出来，先nop一下</p><p><img src="D:\MyBlog\public\img\blogimg\1\11.png" alt="11"></p><p>此处的489577()最终会跳回到main_main，暂时不太了解，是GO语言特殊的栈机制？动态栈？</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
